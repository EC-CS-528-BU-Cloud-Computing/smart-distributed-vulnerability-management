package main

import (
	"github.com/neo4j/neo4j-go-driver/v4/neo4j"
)

type Client neo4j.Driver
type Transaction neo4j.Transaction

func createDriver(uri, username, password string) (Client, error) {
	return neo4j.NewDriver(uri, neo4j.BasicAuth(username, password, ""))
}

func closeDriver(driver neo4j.Driver) error {
	return driver.Close()
}

func generate_relation(image_name string, base_image_name string) error {
	const (
		uri      = "neo4j://localhost:7687"
		username = "neo4j"
		pwd      = "test"
	)
	client, err := createDriver(uri, username, pwd)
	defer func(driver Client) {
		_ = closeDriver(driver)
	}(client)
	if err != nil {
		return err
	}
	//session := client.NewSession(neo4j.SessionConfig{AccessMode: neo4j.AccessModeWrite})
	session := client.NewSession(neo4j.SessionConfig{AccessMode: neo4j.AccessModeRead})
	defer session.Close()

	//create the new relation between an image and its base image
	_, err = session.WriteTransaction(func(tx neo4j.Transaction) (interface{}, error) {
		var result, err = tx.Run("MATCH (node1:Album {Name: $image_name}) "+
			"MATCH (node2:Person {Name: $base_name}) "+
			"MERGE (node1)-[:relation]->(node2)",
			map[string]interface{}{"image_name": base_image_name, "base_name": image_name})
		if err != nil {
			return nil, err
		}
		return result.Consume()
	})

	//_, err = session.ReadTransaction(func(tx neo4j.Transaction) (interface{}, error) {
	//	var num int
	//	var result, err = tx.Run("MATCH (a:Person {Name: $name}) RETURN a", map[string]interface{}{"name": image_name})
	//	for result.Next() {
	//		num++
	//		print(num)
	//	}
	//	if err != nil {
	//		return nil, err
	//	}
	//	return result.Consume()
	//})
	if err != nil {
		return err
	}
	return nil
}

// for test
func main() {
	generate_relation("Devin Townsend", "Heavy as a Really Heavy Thing")
}
