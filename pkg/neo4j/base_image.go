package neo4j

import (
	"github.com/everfix/pkg/config"
	"github.com/neo4j/neo4j-go-driver/v4/neo4j"
)

type Client neo4j.Driver
type Transaction neo4j.Transaction

func createDriver(uri, username, password string) (Client, error) {
	return neo4j.NewDriver(uri, neo4j.BasicAuth(username, password, ""))
}

func closeDriver(driver neo4j.Driver) error {
	return driver.Close()
}

func GenerateRelation(imageName string, baseImageName string) error {
	client, err := createDriver(config.Uri, config.Username, config.Pwd)
	defer func(driver Client) {
		_ = closeDriver(driver)
	}(client)
	if err != nil {
		return err
	}
	session := client.NewSession(neo4j.SessionConfig{AccessMode: neo4j.AccessModeWrite})
	defer session.Close()

	// create the new relation between an image and its base image
	_, err = session.WriteTransaction(func(tx neo4j.Transaction) (interface{}, error) {
		var result, err = tx.Run("MATCH (image:Package {name: $image_name}) "+
			"MATCH (b_image:Package {name: $base_name}) "+
			"MERGE (image)-[:BaseImage]->(b_image)",
			map[string]interface{}{"image_name": imageName, "base_name": baseImageName})
		if err != nil {
			return nil, err
		}
		return result.Consume()
	})
	if err != nil {
		return err
	}
	return nil
}
