package neo4j

import (
	"github.com/everfix/pkg/config"
	"github.com/neo4j/neo4j-go-driver/v4/neo4j"
)

func GenerateRelation(imageName string, baseImageName string) error {
	client, err := CreateDriver(config.Uri, config.Username, config.Pwd, config.Realm)
	defer func(driver Client) {
		_ = CloseDriver(driver)
	}(client)
	if err != nil {
		return err
	}
	session := client.NewSession(neo4j.SessionConfig{AccessMode: neo4j.AccessModeWrite})
	defer session.Close()

	// create the new relation between an image and its base image
	_, err = session.WriteTransaction(func(tx neo4j.Transaction) (interface{}, error) {
		var result, err = tx.Run("MATCH (image:Package {name: $image_name}) "+
			"MATCH (b_image:Package {name: $base_name}) "+
			"MERGE (image)-[:BaseImage]->(b_image)",
			map[string]interface{}{"image_name": imageName, "base_name": baseImageName})
		if err != nil {
			return nil, err
		}
		return result.Consume()
	})
	if err != nil {
		return err
	}
	return nil
}

// GetConnectedImages Get all the images that connected with the vulnerable package
func GetConnectedImages(vulnerabilityPkg string) ([]string, error) {
	client, err := CreateDriver(config.Uri, config.Username, config.Pwd, config.Realm)
	defer func(driver Client) {
		_ = CloseDriver(driver)
	}(client)
	if err != nil {
		return nil, err
	}
	session := client.NewSession(neo4j.SessionConfig{AccessMode: neo4j.AccessModeRead})
	defer session.Close()

	images, err := session.ReadTransaction(func(tx neo4j.Transaction) (interface{}, error) {
		var list []string
		result, err := tx.Run("match(n:Package {name: $pkg_name})<-->(b) return b.name",
			map[string]interface{}{"pkg_name": vulnerabilityPkg})
		if err != nil {
			return nil, err
		}
		for result.Next() {
			list = append(list, result.Record().Values[0].(string))
		}
		if err = result.Err(); err != nil {
			return nil, err
		}
		return list, nil
	})
	if err != nil {
		return nil, err
	}
	return images.([]string), nil
}

// GetBaseImage Get the base image of and given image based on the neo4j graph
// return an empty string if no base image is found
func GetBaseImage(image string) (string, error) {
	client, err := CreateDriver(config.Uri, config.Username, config.Pwd, config.Realm)
	defer func(driver Client) {
		_ = CloseDriver(driver)
	}(client)
	if err != nil {
		return "", err
	}
	session := client.NewSession(neo4j.SessionConfig{AccessMode: neo4j.AccessModeRead})
	defer session.Close()

	baseImage, err := session.ReadTransaction(func(tx neo4j.Transaction) (interface{}, error) {
		result, err := tx.Run("match(n:Package {name: $img_name})-[:BaseImage]->(b) return b.name",
			map[string]interface{}{"img_name": image})
		if err != nil {
			return nil, err
		}
		if result.Next() {
			return result.Record().Values[0].(string), nil
		}
		return "", err
	})
	return baseImage.(string), nil
}
