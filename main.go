package main

import (
	"fmt"
	"path/filepath"
	"strings"

	"github.com/everfix/pkg/config"
	"github.com/everfix/pkg/grype"
	"github.com/everfix/pkg/neo4j"
	"github.com/everfix/pkg/parser"
	"github.com/everfix/pkg/sbom"
)

func main() {

	// example on how to get the base image
	// parse base image
	// example: get the dependency trees for image main and its base image
	fmt.Println("Example for establishing graph for image: main")
	sbom.GenerateSBOM(config.ImageName, config.ImageSource, sbom.SPDX_JSON)
	fmt.Println("\nParsing dockerfile to retrieve main's base image")
	baseImages, err := parser.GetBaseImages("dockerfile/Dockerfile")
	// print the name of base
	if err != nil {
		return
	} else {
		fmt.Println("\nGet base image and :")
		for _, image := range baseImages {
			fmt.Println("Name: ", image.Name)
			fmt.Println("Tag: ", image.Tag)
			// generate SBOM for each image
			sbom.GenerateSBOMFromImage(image, config.ImageSource, sbom.SPDX_JSON)
		}
	}
	fmt.Println("\nGenerating dependency tree for main")
	// connect neo4j and generate the graph
	// parse SBOM
	parser.Parse("bom/")
	imageName := filepath.Join(config.ImageSource, strings.Replace(config.ImageName, ":", "-", -1))
	for _, baseImage := range baseImages {
		baseImageName := filepath.Join(config.ImageSource, baseImage.Name)
		baseImageName += "-" + baseImage.Tag
		fmt.Printf("Generating relationship between %s and %s\n", imageName, baseImageName)
		neo4j.GenerateRelation(imageName, baseImageName)
	}
	// generate the vulnerability table
	grype.GenerateVulTable(config.ImageName, config.ImageSource, grype.TABLE)
	vulnerabilities := grype.GetVulnerability(filepath.Join("vul", config.ImageName+".txt"))

	// query for images connected with vulnerable packages
	for i, vul := range vulnerabilities {
		connectedImages, err := neo4j.GetConnectedImages(vul.PkgName)
		if err != nil {
			fmt.Println("Error fetching connected images", err)
		}
		vulnerabilities[i].ConnectedImages = connectedImages
	}
	// query to get the remediation image
	for i, vul := range vulnerabilities {
		fixImage, err := neo4j.GetImageForFixing(vul.ConnectedImages)
		if err != nil {
			fmt.Println("Error getting the remediation image")
		}
		vulnerabilities[i].RemediationImage = fixImage
	}
	// for testing the functionality
	for _, vul := range vulnerabilities {
		fmt.Println(vul)
	}
}
