package main

import (
	"fmt"
	"github.com/everfix/pkg/config"
	"github.com/everfix/pkg/grype"
	"github.com/everfix/pkg/neo4j"
	"github.com/everfix/pkg/parser"
	"github.com/everfix/pkg/sbom"
	"path/filepath"
	"strings"
)

func main() {

	// example on how to get the base image
	// parse base image
	// example: get the dependency trees for image main and its base image
	fmt.Println("Example for establishing graph for image: main")
	sbom.GenerateSBOM(config.ImageName, config.ImageSource, sbom.SPDX_JSON)
	fmt.Println("\nParsing dockerfile to retrieve main's base image")
	baseImage, err := parser.GetBaseImage("dockerfile/Dockerfile")
	// print the name of base
	if err == nil {
		fmt.Println("\nGet base image")
		fmt.Println("Name: ", baseImage.Name)
		fmt.Println("Tag: ", baseImage.Tag)
	}
	// generate sbom for the base image and the image
	imageStr := baseImage.Name + ":" + baseImage.Tag
	sbom.GenerateSBOM(imageStr, config.ImageSource, sbom.SPDX_JSON)
	fmt.Println("\nGenerating dependency tree for main")
	// connect neo4j and generate the graph
	parser.Parse("bom/")
	imageName := filepath.Join(config.ImageSource, strings.Replace(config.ImageName, ":", "-", -1))
	baseImageName := filepath.Join(config.ImageSource, baseImage.Name)
	baseImageName += "-" + baseImage.Tag
	fmt.Println(imageName)
	fmt.Println(baseImageName)
	neo4j.GenerateRelation(imageName, baseImageName)
	// generate the vulnerability table
	grype.GenerateVulTable(config.ImageName, config.ImageSource, grype.TABLE)
	vulnerabilities := grype.GetVulnerability(filepath.Join("vul", config.ImageName+".txt"))
	// for testing the parsing functionality
	for _, vul := range vulnerabilities {
		fmt.Println(vul)
	}
}
