package main

import (
	"fmt"
	"path/filepath"

	"github.com/everfix/pkg/config"
	"github.com/everfix/pkg/graph"
	"github.com/everfix/pkg/grype"
	"github.com/everfix/pkg/neo4j"
)

func main() {

	// example on graph assembling
	graph.AssembleGraph(config.ImageName, config.ImageSource, "Dockerfile")

	// generate the vulnerability table
	grype.GenerateVulTable(config.ImageName, config.ImageSource, grype.TABLE)
	vulnerabilities := grype.GetVulnerability(filepath.Join("vul", config.ImageName+".txt"))

	// query for images connected with vulnerable packages
	for i, vul := range vulnerabilities {
		connectedImages, err := neo4j.GetConnectedImages(vul.PkgName)
		if err != nil {
			fmt.Println("Error fetching connected images", err)
		}
		vulnerabilities[i].ConnectedImages = connectedImages
	}
	// query to get the remediation image
	for i, vul := range vulnerabilities {
		fixImage, err := neo4j.GetImageForFixing(vul.ConnectedImages)
		if err != nil {
			fmt.Println("Error getting the remediation image")
		}
		vulnerabilities[i].RemediationImage = fixImage
	}
	// for testing the functionality
	for _, vul := range vulnerabilities {
		fmt.Println(vul)
	}
}
